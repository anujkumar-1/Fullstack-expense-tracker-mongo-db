import { Upload } from '@aws-sdk/lib-storage';
import PDFDocument from 'pdfkit';
import { PassThrough } from 'stream';
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";
import dotenv from 'dotenv';
dotenv.config()


export async function generateAndUploadPDF(userDetails, expenses, key) {
    const IAM_USER_KEY = process.env.AWS_S3_ACCESS_KEY;
    const IAM_USER_SECRET = process.env.AWS_S3_SECRET_KEY;
    const BUCKET_NAME = process.env.AWS_S3_BUCKET_NAME;

    const s3Client = new S3Client({
        region: "us-east-1",
        credentials: {
          accessKeyId: IAM_USER_KEY,
          secretAccessKey: IAM_USER_SECRET,
        },
    });

    const doc = new PDFDocument();
    const passThrough = new PassThrough();
  
    // Build the PDF content
    addUserDetails(doc, userDetails);
    addExpensesTable(doc, expenses);
    addFooter(doc);
  
    // Pipe to stream and upload
    doc.pipe(passThrough);
    doc.end();
  
    try {

        const upload = new Upload({
            client: s3Client,
            params: {
              Bucket: BUCKET_NAME,
              Key: key,
              Body: passThrough,
              ContentType: 'application/pdf',
              ACL: "public-read",
            },
        });

        const result = await upload.done();
        return result.Location; // Return the S3 URL
      
    } catch (error) {
      console.error('Error uploading PDF:', error);
      throw error;
    }
}
  
const date = new Date().getFullYear();
function addUserDetails(doc, userDetails) {
    // Header
    doc.fontSize(20)
       .text(`Financial Summary ${date}`, { align: 'center' })
       .moveDown(1);
  
    // User info box
    doc.rect(50, doc.y, 500, 80).stroke()
       .fontSize(14)
       .text('User Details:', 60, doc.y + 10)
       .fontSize(12)
       .text(`Name: ${userDetails.username}`, 60, doc.y + 30)
       .text(`Email: ${userDetails.email}`, 60, doc.y + 50)
       .moveDown(2);
  
    // Financial summary
    doc.fontSize(14)
       .text('Financial Overview:', { underline: true })
       .moveDown(0.5)
       .text(`Total Income: $${userDetails.totalIncome.toFixed(2)}`)
       .text(`Total Expenses: $${userDetails.totalCost.toFixed(2)}`)
       .text(`Net Balance: $${(userDetails.totalIncome - userDetails.totalCost).toFixed(2)}`, { bold: true })
       .moveDown(2);
}
  
function addExpensesTable(doc, expenses) {
    // Table header
    doc.fontSize(14)
       .text('Expense Details:', { underline: true })
       .moveDown(0.5);
  
    const startY = doc.y;
    const col1 = 50;
    const col2 = 350;
    const col3 = 450;
  
    // Header row
    doc.font('Helvetica-Bold')
       .fontSize(12)
       .text('Description', col1, startY)
       .text('Amount', col2, startY)
       .text('Date', col3, startY)
       .moveTo(col1, startY + 20)
       .lineTo(col3 + 100, startY + 20)
       .stroke();
  
    // Expense rows
    let y = startY + 30;
    expenses.forEach((expense, index) => {
      doc.font('Helvetica')
         .fontSize(10)
         .text(expense.description || 'No description', col1, y)
         .text(`$${expense.amount.toFixed(2)}`, col2, y)
         .text(expense.date || new Date(expense.createdAt).toLocaleDateString(), col3, y);
  
      // Add subtle row separator
      if (index < expenses.length - 1) {
        doc.moveTo(col1, y + 15)
           .lineTo(col3 + 100, y + 15)
           .lineWidth(0.5)
           .stroke();
      }
      y += 20;
    });
  
    doc.moveDown(2);
}
  

function addFooter(doc) {
    const footerText = 'Generated by Expenso App - Confidential';
    const footerY = doc.page.height - 50;
  
    doc.fontSize(10)
       .text(footerText, 50, footerY, {
         align: 'center',
         width: doc.page.width - 100
       });
  
    // Add page numbers if document has multiple pages
    doc.on('pageAdded', () => {
      doc.text(`Page ${doc.bufferedPageRange().count + 1}`, 50, footerY, {
        align: 'right',
        width: doc.page.width - 100
      });
    });
}